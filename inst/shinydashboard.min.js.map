{"version":3,"sources":["../srcjs/_start.js","../srcjs/shinydashboard-part.js"],"names":["$","deactivateOtherTabs","$this","this","$sidebarMenu","closest","$tablinks","find","not","parent","removeClass","trigger","document","on","ensureActivatedTab","filter","$startTab","length","tab","hasClass","first","updateSidebarVal","$obj","inputBinding","data","toggleValue","updateItemExpanded","val","setValue","addClass","hide","window","console","log","attr","substring","next","menuOutputBinding","Shiny","OutputBinding","extend","scope","onValueError","el","err","unbindAll","renderError","renderValue","html","dependencies","deps","$html","parseHTML","renderHtml","className","initializeInputs","bindAll","outputBindings","register","tabItemInputBinding","InputBinding","getValue","anchor","children","_getTabName","value","self","anchors","each","receiveMessage","hasOwnProperty","subscribe","callback","unsubscribe","off","inputBindings","sidebarmenuExpandedInputBinding","getId","initialize","$expanded","prev","$ul","show","sidebarCollapsedInputBinding","current","newVal"],"mappings":"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","file":"shinydashboard.min.js","sourcesContent":["//---------------------------------------------------------------------\n// Source file: ../srcjs/_start.js\n\n$(function() {\n","//---------------------------------------------------------------------\n// Source file: ../srcjs/shinydashboard-part.js\n\n/* jshint browser:true, jquery:true, indent:2 */\n/* global Shiny */\n\n  // This function handles a special case in the AdminLTE sidebar: when there\n  // is a sidebar-menu with items, and one of those items has sub-items, and\n  // they are used for tab navigation. Normally, if one of the items is\n  // selected and then a sub-item is clicked, both the item and sub-item will\n  // retain the \"active\" class, so they will both be highlighted. This happens\n  // because they're not designed to be used together for tab panels. This\n  // code ensures that only one item will have the \"active\" class.\n  var deactivateOtherTabs = function() {\n    var $this = $(this);\n    var $sidebarMenu = $this.closest(\"ul.sidebar-menu\");\n\n    // Find all tab links under sidebar-menu\n    var $tablinks = $sidebarMenu.find(\"a[data-toggle='tab']\");\n\n    // If any other items are active, deactivate them\n    $tablinks.not($this).parent(\"li\").removeClass(\"active\");\n\n    // Trigger event for the tabItemInputBinding\n    $sidebarMenu.trigger('change.tabItemInputBinding');\n  };\n\n  $(document).on('shown.bs.tab', '.sidebar-menu a[data-toggle=\"tab\"]',\n                 deactivateOtherTabs);\n\n\n  // When document is ready, if there is a sidebar menu with no activated tabs,\n  // activate the one specified by `data-start-selected`, or if that's not\n  // present, the first one.\n  var ensureActivatedTab = function() {\n    var $tablinks = $(\"ul.sidebar-menu\").find(\"a\").filter(\"[data-toggle='tab']\");\n\n    // If there's a `data-start-selected` attribute and we can find a tab with\n    // that name, activate it.\n    var $startTab = $tablinks.filter(\"[data-start-selected='1']\");\n    if ($startTab.length !== 0) {\n      $startTab.tab(\"show\");\n      return;\n    }\n\n    // If we got this far, just activate the first tab.\n    if (! $tablinks.parent(\"li\").hasClass(\"active\") ) {\n      $tablinks.first().tab(\"show\");\n    }\n  };\n\n  ensureActivatedTab();\n\n  // sendMessage to sidebar when we programmatically disable it\n  // (this ensure that the sidebar has the correct value)\n  var updateSidebarVal = function() {\n    var $obj = $('.shiny-bound-input.main-sidebar');\n    var inputBinding = $obj.data('shiny-input-binding');\n    inputBinding.toggleValue($obj);\n    $obj.trigger('change');\n\n  };\n\n  var updateItemExpanded = function(val) {\n    var $obj = $('section.sidebar.shiny-bound-input');\n    var inputBinding = $obj.data('shiny-input-binding');\n    inputBinding.setValue($obj, val);\n    $obj.trigger('change');\n\n  };\n\n\n  // Optionally disable sidebar\n  if ($(\"section.sidebar\").data(\"disable\")) {\n    $(\"body\").addClass(\"sidebar-collapse\");\n    $(\".navbar > .sidebar-toggle\").hide();\n  }\n\n  // Trigger the resize event when the sidebar is collapsed/expanded\n  // (this allows images to be responsive and resize themselves)\n  $(document).on(\"click\", \".sidebar-toggle\", function() {\n    $(window).trigger(\"resize\");\n    updateSidebarVal();\n  });\n\n\n  // ...\n  $(document).on(\"click\", \"a[href^='#shiny-tab-']\", function() {\n    console.log(this);\n    if ($(this).parent().hasClass('treeview')) {\n      updateItemExpanded($(this).attr('href').substring(1));\n    }\n  });\n\n  // var dataExpanded = $(\"section.sidebar\").attr(\"data-expanded\");\n  // updateItemExpanded(dataExpanded);\n\n  $(document).on(\"click\", \".treeview > a\", function() {\n    $(this).next(\".treeview-menu\").trigger(\"shown\");\n  });\n\n  // menuOutputBinding\n  // ------------------------------------------------------------------\n  // Based on Shiny.htmlOutputBinding, but instead of putting the result in a\n  // wrapper div, it replaces the origin DOM element with the new DOM elements,\n  // copying over the ID and class.\n  var menuOutputBinding = new Shiny.OutputBinding();\n  $.extend(menuOutputBinding, {\n    find: function(scope) {\n      return $(scope).find('.shinydashboard-menu-output');\n    },\n    onValueError: function(el, err) {\n      Shiny.unbindAll(el);\n      this.renderError(el, err);\n    },\n    renderValue: function(el, data) {\n      Shiny.unbindAll(el);\n\n      var html;\n      var dependencies = [];\n      if (data === null) {\n        return;\n      } else if (typeof(data) === 'string') {\n        html = data;\n      } else if (typeof(data) === 'object') {\n        html = data.html;\n        dependencies = data.deps;\n      }\n\n      var $html = $($.parseHTML(html));\n\n      // Convert the inner contents to HTML, and pass to renderHtml\n      Shiny.renderHtml($html.html(), el, dependencies);\n\n      // Extract class of wrapper, and add them to the wrapper element\n      el.className = 'shinydashboard-menu-output shiny-bound-output ' +\n                     $html.attr('class');\n\n      Shiny.initializeInputs(el);\n      Shiny.bindAll(el);\n    }\n  });\n  Shiny.outputBindings.register(menuOutputBinding,\n                                \"shinydashboard.menuOutputBinding\");\n\n\n  // tabItemInputBinding\n  // ------------------------------------------------------------------\n  // Based on Shiny.tabItemInputBinding, but customized for tabItems in\n  // shinydashboard, which have a slightly different structure.\n  var tabItemInputBinding = new Shiny.InputBinding();\n  $.extend(tabItemInputBinding, {\n    find: function(scope) {\n      return $(scope).find('ul.sidebar-menu');\n    },\n    getValue: function(el) {\n      var anchor = $(el).find('li:not(.treeview).active').children('a');\n      if (anchor.length === 1)\n        return this._getTabName(anchor);\n\n      return null;\n    },\n    setValue: function(el, value) {\n      var self = this;\n      var anchors = $(el).find('li:not(.treeview)').children('a');\n      anchors.each(function() {\n        if (self._getTabName($(this)) === value) {\n          $(this).tab('show');\n          return false;\n        }\n      });\n    },\n    receiveMessage: function(el, data) {\n      if (data.hasOwnProperty('value'))\n        this.setValue(el, data.value);\n    },\n    subscribe: function(el, callback) {\n      // This event is triggered by deactivateOtherTabs, which is triggered by\n      // shown. The deactivation of other tabs must occur before Shiny gets the\n      // input value.\n      $(el).on('change.tabItemInputBinding', function() {\n        callback();\n      });\n    },\n    unsubscribe: function(el) {\n      $(el).off('.tabItemInputBinding');\n    },\n    _getTabName: function(anchor) {\n      return anchor.attr('data-value');\n    }\n  });\n  Shiny.inputBindings.register(tabItemInputBinding, 'shinydashboard.tabItemInput');\n\n\n  // sidebarmenuExpandedInputBinding\n  // ------------------------------------------------------------------\n  // This keeps tracks of what menuItem (if any) is expanded\n  var sidebarmenuExpandedInputBinding = new Shiny.InputBinding();\n  $.extend(sidebarmenuExpandedInputBinding, {\n    find: function(scope) {\n      return $(scope).find('section.sidebar');\n    },\n    getId: function(el) {\n      return \"itemExpanded\";\n      // return $('ul.sidebar-menu').attr('id') + \"Expanded\";\n    },\n\n    /* */\n    initialize: function(el) {\n      // if ($(el).attr(\"data-expanded\")) return $(el).attr(\"data-expanded\");\n      $(this).trigger('change');\n    },\n    /* */\n\n    // the value is the href of the open menuItem (or NULL if there's\n    // no open menuItem)\n    getValue: function(el) {\n      var $expanded = $(el).find('li ul.menu-open');\n      if ($expanded.length === 1) return $expanded.prev().attr('href').substring(1);\n      else if ($(el).attr(\"data-expanded\")) return $(el).attr(\"data-expanded\");\n      else return null;\n    },\n    setValue: function(el, value) {\n      // first hide everything\n      var $uls = $('.treeview-menu');\n      //$uls.each(function() {\n        //$ul.removeClass('menu-open');\n        //$ul.hide();\n      //});\n      // then show the appropriate menu\n      if (value !== null) {\n        var $ul = $('a[href=\"#' + value + '\"]').next();\n        $ul.addClass('menu-open');\n        $ul.show();\n      }\n      /*\n      var $ul = $('a[href=\"' + value + '\"').next();\n      if (value === \"open\") {\n        $ul.addClass('menu-open');\n        $ul.show();\n      } else {\n        $ul.removeClass('menu-open');\n        $ul.hide();\n      }\n      */\n    },\n    /*\n    toggleValue: function(el) {\n      var current = this.getValue(el);\n      var newVal = (current == \"open\") ? \"closed\" : \"open\";\n      this.setValue(el, newVal);\n    },\n    */\n    receiveMessage: function(el, data) {\n      if (data.hasOwnProperty('value'))\n        this.setValue(el, data.value);\n    },\n    subscribe: function(el, callback) {\n      $(el).on('change.sidebarmenuExpandedInputBinding', function() {\n        callback();\n      });\n    },\n    unsubscribe: function(el) {\n      $(el).off('.sidebarmenuExpandedInputBinding');\n    }\n  });\n  Shiny.inputBindings.register(sidebarmenuExpandedInputBinding,\n    'shinydashboard.sidebarmenuExpandedInputBinding');\n\n\n  // sidebarCollapsedInputBinding\n  // ------------------------------------------------------------------\n  // This keeps tracks of whether the sidebar is expanded (default)\n  // or collapsed\n  var sidebarCollapsedInputBinding = new Shiny.InputBinding();\n  $.extend(sidebarCollapsedInputBinding, {\n    find: function(scope) {\n      return $(scope).find('.main-sidebar').first();\n    },\n    getId: function(el) {\n      return \"sidebarCollapsed\";\n    },\n    getValue: function(el) {\n      return $(el).attr(\"data-value\");\n    },\n    setValue: function(el, value) {\n      $(el).attr(\"data-value\", value);\n    },\n    toggleValue: function(el) {\n      var current = this.getValue(el);\n      var newVal = (current == \"collapsed\") ? \"expanded\" : \"collapsed\";\n      this.setValue(el, newVal);\n    },\n    receiveMessage: function(el, data) {\n      if (data.hasOwnProperty('value'))\n        this.setValue(el, data.value);\n    },\n    subscribe: function(el, callback) {\n      $(el).on('change.sidebarCollapsedInputBinding', function() {\n        callback();\n      });\n    },\n    unsubscribe: function(el) {\n      $(el).off('.sidebarCollapsedInputBinding');\n    }\n  });\n  Shiny.inputBindings.register(sidebarCollapsedInputBinding,\n    'shinydashboard.sidebarCollapsedInputBinding');\n"]}