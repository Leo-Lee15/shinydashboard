{"version":3,"sources":["../srcjs/_start.js","../srcjs/tabs.js","../srcjs/sidebar.js","../srcjs/output_binding_menu.js","../srcjs/input_binding_tabItem.js","../srcjs/input_binding_sidebarCollapsed.js","../srcjs/input_binding_sidebarmenuExpanded.js"],"names":["$","deactivateOtherTabs","$this","this","$tablinks","closest","not","parent","removeClass","trigger","document","on","ensureActivatedTab","find","filter","$startTab","length","tab","hasClass","first","data","addClass","hide","next","window","$obj","inputBinding","toggleValue","value","attr","substring","setValue","menuOutputBinding","Shiny","OutputBinding","extend","scope","onValueError","el","err","unbindAll","renderError","renderValue","html","dependencies","deps","$html","parseHTML","renderHtml","className","initializeInputs","bindAll","outputBindings","register","tabItemInputBinding","InputBinding","getValue","anchor","children","_getTabName","self","anchors","each","receiveMessage","hasOwnProperty","subscribe","callback","unsubscribe","off","inputBindings","sidebarCollapsedInputBinding","getId","current","newVal","sidebarmenuExpandedInputBinding","initialize","$expanded","firstChild","$ul","show"],"mappings":"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","file":"shinydashboard.min.js","sourcesContent":["//---------------------------------------------------------------------\n// Source file: ../srcjs/_start.js\n\n$(function() {\n","//---------------------------------------------------------------------\n// Source file: ../srcjs/tabs.js\n\n// This function handles a special case in the AdminLTE sidebar: when there\n// is a sidebar-menu with items, and one of those items has sub-items, and\n// they are used for tab navigation. Normally, if one of the items is\n// selected and then a sub-item is clicked, both the item and sub-item will\n// retain the \"active\" class, so they will both be highlighted. This happens\n// because they're not designed to be used together for tab panels. This\n// code ensures that only one item will have the \"active\" class.\nvar deactivateOtherTabs = function() {\n  var $this = $(this);\n  var $sidebarMenu = $this.closest(\"ul.sidebar-menu\");\n\n  // Find all tab links under sidebar-menu even if they don't have a\n  // tabName (which is why the second selector is necessary)\n  var $tablinks = $(\".sidebar-menu a[data-toggle='tab'],\" +\n    \".sidebar-menu li.treeview > a\");\n\n  // If any other items are active, deactivate them\n  $tablinks.not($this).parent(\"li\").removeClass(\"active\");\n\n  // Trigger event for the tabItemInputBinding\n  $('.sidebarMenuSelectedTabItem').trigger('change.tabItemInputBinding');\n};\n\n$(document).on('shown.bs.tab', '.sidebar-menu a[data-toggle=\"tab\"]',\n               deactivateOtherTabs);\n\n// When document is ready, if there is a sidebar menu with no activated tabs,\n// activate the one specified by `data-start-selected`, or if that's not\n// present, the first one.\nvar ensureActivatedTab = function() {\n  var $tablinks = $(\"ul.sidebar-menu\").find(\"a\").filter(\"[data-toggle='tab']\");\n\n  // If there's a `data-start-selected` attribute and we can find a tab with\n  // that name, activate it.\n  var $startTab = $tablinks.filter(\"[data-start-selected='1']\");\n  if ($startTab.length !== 0) {\n    $startTab.tab(\"show\");\n    return;\n  }\n\n  // If we got this far, just activate the first tab.\n  if (! $tablinks.parent(\"li\").hasClass(\"active\") ) {\n    $tablinks.first().tab(\"show\");\n  }\n};\n\nensureActivatedTab();\n","//---------------------------------------------------------------------\n// Source file: ../srcjs/sidebar.js\n\n// Optionally disable sidebar\nif ($(\"section.sidebar\").data(\"disable\")) {\n  $(\"body\").addClass(\"sidebar-collapse\");\n  $(\".navbar > .sidebar-toggle\").hide();\n}\n\n// Trigger \"shown\" event for elements that only become visible after\n// the corresponding menuItem is expanded (otherwise, Shiny will still\n// think they're hidden and not render them)\n$(document).on(\"click\", \".treeview > a\", function() {\n  $(this).next(\".treeview-menu\").trigger(\"shown\");\n});\n\n// Whenever the sidebar expand/collapse button is clicked:\n//   *  Trigger the resize event (this allows images to be\n//      responsive and resize themselves)\n//   *  Update the value for the sidebar's input binding\n$(document).on(\"click\", \".sidebar-toggle\", function() {\n  $(window).trigger(\"resize\");\n  var $obj = $('.main-sidebar.shiny-bound-input');\n  var inputBinding = $obj.data('shiny-input-binding');\n  inputBinding.toggleValue($obj);\n  $obj.trigger('change');\n});\n\n// Whenever we expand a menuItem (to be expandable, it must have children),\n// update the value for the expandedItem's input binding (this is the\n// tabName of the fist subMenuItem inside the menuItem that is currently\n// expanded)\n$(document).on(\"click\", \".treeview > a\", function() {\n  var $obj = $('section.sidebar.shiny-bound-input');\n  var inputBinding = $obj.data('shiny-input-binding');\n  var value;\n\n  // If this menuItem was already open, then clicking on it again,\n  // should update the input binding back to null\n  if ($(this).next().hasClass(\"menu-open\")) {\n    value = null;\n  } else if ($(this).next().hasClass(\"treeview-menu\")) {\n    value = $(this).next().find('a').attr('href').substring(1);\n  }\n  inputBinding.setValue($obj, value);\n  $obj.trigger('change');\n});\n","//---------------------------------------------------------------------\n// Source file: ../srcjs/output_binding_menu.js\n\n/* global Shiny */\n\n// menuOutputBinding\n// ------------------------------------------------------------------\n// Based on Shiny.htmlOutputBinding, but instead of putting the result in a\n// wrapper div, it replaces the origin DOM element with the new DOM elements,\n// copying over the ID and class.\nvar menuOutputBinding = new Shiny.OutputBinding();\n$.extend(menuOutputBinding, {\n  find: function(scope) {\n    return $(scope).find('.shinydashboard-menu-output');\n  },\n  onValueError: function(el, err) {\n    Shiny.unbindAll(el);\n    this.renderError(el, err);\n  },\n  renderValue: function(el, data) {\n    Shiny.unbindAll(el);\n\n    var html;\n    var dependencies = [];\n    if (data === null) {\n      return;\n    } else if (typeof(data) === 'string') {\n      html = data;\n    } else if (typeof(data) === 'object') {\n      html = data.html;\n      dependencies = data.deps;\n    }\n\n    var $html = $($.parseHTML(html));\n\n    //$(el).append('<div class></div>');\n\n    // Convert the inner contents to HTML, and pass to renderHtml\n    Shiny.renderHtml($html.html(), el, dependencies);\n\n    // Extract class of wrapper, and add them to the wrapper element\n    el.className = 'shinydashboard-menu-output shiny-bound-output ' +\n                   $html.attr('class');\n\n    Shiny.initializeInputs(el);\n    Shiny.bindAll(el);\n    ensureActivatedTab();\n  }\n});\nShiny.outputBindings.register(menuOutputBinding,\n                              \"shinydashboard.menuOutputBinding\");\n","//---------------------------------------------------------------------\n// Source file: ../srcjs/input_binding_tabItem.js\n\n/* global Shiny */\n\n// tabItemInputBinding\n// ------------------------------------------------------------------\n// Based on Shiny.tabItemInputBinding, but customized for tabItems in\n// shinydashboard, which have a slightly different structure.\nvar tabItemInputBinding = new Shiny.InputBinding();\n$.extend(tabItemInputBinding, {\n  find: function(scope) {\n    return $(scope).find('.sidebarMenuSelectedTabItem');\n  },\n  getValue: function(el) {\n    var anchor = $(el).next('ul.sidebar-menu').find('li:not(.treeview).active').children('a');\n    if (anchor.length === 1)\n      return this._getTabName(anchor);\n\n    return null;\n  },\n  setValue: function(el, value) { // eslint-disable-line consistent-return\n    var self = this;\n    var anchors = $(el).next('ul.sidebar-menu').find('li:not(.treeview)').children('a');\n    anchors.each(function() {\n      if (self._getTabName($(this)) === value) {\n        $(this).tab('show');\n        return false;\n      } else return true;\n    });\n  },\n  receiveMessage: function(el, data) {\n    if (data.hasOwnProperty('value'))\n      this.setValue(el, data.value);\n  },\n  subscribe: function(el, callback) {\n    // This event is triggered by deactivateOtherTabs, which is triggered by\n    // shown. The deactivation of other tabs must occur before Shiny gets the\n    // input value.\n    $(el).on('change.tabItemInputBinding', function() {\n      callback();\n    });\n  },\n  unsubscribe: function(el) {\n    $(el).off('.tabItemInputBinding');\n  },\n  _getTabName: function(anchor) {\n    return anchor.attr('data-value');\n  }\n});\nShiny.inputBindings.register(tabItemInputBinding, 'shinydashboard.tabItemInput');\n","//---------------------------------------------------------------------\n// Source file: ../srcjs/input_binding_sidebarCollapsed.js\n\n/* global Shiny */\n\n// sidebarCollapsedInputBinding\n// ------------------------------------------------------------------\n// This keeps tracks of whether the sidebar is expanded (default)\n// or collapsed\nvar sidebarCollapsedInputBinding = new Shiny.InputBinding();\n$.extend(sidebarCollapsedInputBinding, {\n  find: function(scope) {\n    return $(scope).find('.main-sidebar').first();\n  },\n  getId: function(el) {\n    return \"sidebarCollapsed\";\n  },\n  getValue: function(el) {\n    return $(el).attr(\"data-value\");\n  },\n  setValue: function(el, value) {\n    $(el).attr(\"data-value\", value);\n  },\n  toggleValue: function(el) {\n    var current = this.getValue(el);\n    var newVal = (current === \"collapsed\") ? \"expanded\" : \"collapsed\";\n    this.setValue(el, newVal);\n  },\n  receiveMessage: function(el, data) {\n    if (data.hasOwnProperty('value'))\n      this.setValue(el, data.value);\n  },\n  subscribe: function(el, callback) {\n    $(el).on('change.sidebarCollapsedInputBinding', function() {\n      callback();\n    });\n  },\n  unsubscribe: function(el) {\n    $(el).off('.sidebarCollapsedInputBinding');\n  }\n});\nShiny.inputBindings.register(sidebarCollapsedInputBinding,\n  'shinydashboard.sidebarCollapsedInputBinding');\n","//---------------------------------------------------------------------\n// Source file: ../srcjs/input_binding_sidebarmenuExpanded.js\n\n/* global Shiny */\n\n// sidebarmenuExpandedInputBinding\n// ------------------------------------------------------------------\n// This keeps tracks of what menuItem (if any) is expanded\nvar sidebarmenuExpandedInputBinding = new Shiny.InputBinding();\n$.extend(sidebarmenuExpandedInputBinding, {\n  find: function(scope) {\n    return $(scope).find('section.sidebar');\n  },\n  getId: function(el) {\n    return \"itemExpanded\";\n  },\n  // needed so we set the appropriate value for bookmarked apps on startup\n  initialize: function(el) {\n    $(this).trigger('change');\n  },\n  // the value is the href of the open menuItem (or NULL if there's\n  // no open menuItem)\n  getValue: function(el) {\n    var $expanded = $(el).find('li ul.menu-open');\n    if ($expanded.length === 1) {\n      return $expanded.find('a').attr('href').substring(1);\n    } else if ($(el).attr(\"data-expanded\")) {\n      return $(el).attr(\"data-expanded\");\n    } else {\n      return null;\n    }\n  },\n  setValue: function(el, value) {\n    if (value !== null) {\n      var firstChild = 'a[href=\"#' + value + '\"]';\n      var $ul = $(firstChild).parent().parent('.treeview-menu');\n      $ul.addClass('menu-open');\n      $ul.show();\n    } else {\n      var $ul = $(el).find('li ul.menu-open');\n      $ul.removeClass('menu-open');\n      $ul.hide();\n    }\n  },\n  receiveMessage: function(el, data) {\n    if (data.hasOwnProperty('value'))\n      this.setValue(el, data.value);\n  },\n  subscribe: function(el, callback) {\n    $(el).on('change.sidebarmenuExpandedInputBinding', function() {\n      callback();\n    });\n  },\n  unsubscribe: function(el) {\n    $(el).off('.sidebarmenuExpandedInputBinding');\n  }\n});\nShiny.inputBindings.register(sidebarmenuExpandedInputBinding,\n  'shinydashboard.sidebarmenuExpandedInputBinding');\n"]}